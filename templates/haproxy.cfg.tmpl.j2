
global
  log 127.0.0.1   local0
  log 127.0.0.1   local1 notice
  #log loghost    local0 info
  maxconn {{ haproxy_config_global_max_connections }}
  #debug
  #quiet
  user  {{ haproxy_user }}
  group {{ haproxy_group }}

  {% if haproxy_config_stats_socket_level %}
  stats socket {{ haproxy_config_stats_socket_path }} level {{ haproxy_config_stats_socket_level }}
  {% else %}
  stats socket {{ haproxy_config_stats_socket_path }}
  {% endif %}

defaults
  log             global
  mode            http
  option          httplog
  option          dontlognull
  option          forwardfor except 127.0.0.0/8
  option          redispatch
  retries                 {{ haproxy_config_retries }}
  maxconn                 {{ haproxy_config_default_max_connections }}
  timeout client          {{ haproxy_config_client_timeout }}             # Client and server timeout must match the longest
  timeout server          {{ haproxy_config_server_timeout }}             # time we may wait for a response from the server.
  timeout queue           {{ haproxy_config_queue_timeout }}              # Don't queue requests too long if saturated.
  timeout connect         {{ haproxy_config_connect_timeout }}           # There's no reason to change this one.
  timeout http-request    {{ haproxy_config_http_request_timeout }}	# A complete request may never take that long.
  timeout check           10s
  timeout http-keep-alive 10s
  option          http-server-close
  option          abortonclose                                      # enable early dropping of aborted requests from pending queue
  option          httpchk                                           # enable HTTP protocol to check on servers health

  {% if haproxy_config_enable_stats %}
  stats auth {{ haproxy_config_stats_user }}:{{ haproxy_config_stats_password }}
  stats uri {{ haproxy_config_stats_url }}
  {% endif %}

#listen application 0.0.0.0:80
#  # configure a fake backend as long as there are no real ones
#  # this way HAProxy will not fail on a config check
#  balance {{ haproxy_config_balance }}
#  server localhost 127.0.0.1:8080 weight 1 maxconn 5 check

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main_http *:80
	option forwardfor except 127.0.0.1
	default_backend         nginx_80

	acl host_upload hdr_beg(host) -i upload.
	acl host_upload path_sub -i upload

	use_backend upload_80 if host_upload

frontend main_https *:443
	option forwardfor except 127.0.0.1
	default_backend         nginx_443

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
{% raw %}

backend nginx_80
	balance     roundrobin
	option httpchk GET /health HTTP/1.1\r\nHost:\ health
	{{range service "nginx_http@taku"}}
	server {{.Name}} {{.Address}}:{{.Port}}{{end}}

backend nginx_443
	balance     roundrobin
	option httpchk
	{{range service "nginx_https@taku"}}
	server {{.Name}} {{.Address}}:{{.Port}}{{end}}

backend upload_80
	balance source #source IP
	option httpchk GET /nginx_status HTTP/1.1\r\nHost:\ health
	{{range service "nginx_upload@taku"}}
	server {{.Name}} {{.Address}}:{{.Port}}{{end}}
 
{% endraw %}
